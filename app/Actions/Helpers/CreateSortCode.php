<?php

/*
 * Author: Raul Perusquia <raul@inikoo.com>
 * Created: Thu, 31 Jul 2025 14:16:26 Central European Summer Time, Trnava, Slovakia
 * Copyright (c) 2025, Raul A Perusquia Flores
 */

namespace App\Actions\Helpers;

use Lorisleiva\Actions\Concerns\AsAction;

/**
 * CreateSortCode
 *
 * This action generates a sort_code from an alphanumeric code by parsing it into
 * sections of letters and numbers, then padding numeric sections for better sorting.
 *
 * The sort_code is generated by:
 * 1. Parsing the code into sections of letters and numbers (using direct digit check)
 * 2. Appending 5 zeros to each numeric section (e.g., "45" becomes "4500000")
 * 3. Joining all sections together
 *
 * Example:
 * - Input code: "45Y26"
 * - Parsed sections: ["45", "Y", "26"]
 * - Processed sections: ["4500000", "Y", "2600000"]
 * - Final sort_code: "4500000Y2600000"
 *
 * This approach ensures that codes are sorted correctly when they contain
 * a mix of letters and numbers, by padding numeric sections with zeros.
 */
class CreateSortCode
{
    use AsAction;

    /**
     * Generate a sort code from an alphanumeric code
     *
     * @param string $code The alphanumeric code to process
     * @return string The generated sort code
     */
    public function handle(string $code): string
    {
        $code = strtolower($code);
        $sections = [];
        $currentSection = '';
        $currentType = null; // 'alpha' or 'numeric'

        // Split the code into sections of letters and numbers
        for ($i = 0; $i < strlen($code); $i++) {
            $char = $code[$i];
            $isDigit = is_numeric($char);
            $charType = $isDigit ? 'numeric' : 'alpha';

            // If this is the first character or the type has changed
            if ($currentType === null || $currentType !== $charType) {
                // Save the previous section if it exists
                if ($currentSection !== '') {
                    $sections[] = [
                        'value' => $currentSection,
                        'type' => $currentType
                    ];
                    $currentSection = '';
                }
                $currentType = $charType;
            }

            $currentSection .= $char;
        }

        // Add the last section
        if ($currentSection !== '') {
            $sections[] = [
                'value' => $currentSection,
                'type' => $currentType
            ];
        }

        // Process each section: append 5 zeros to numeric sections
        $processedSections = [];
        foreach ($sections as $section) {
            if ($section['type'] === 'numeric') {
                $numericValue = intval((float)$section['value']);
                $processedSections[] = sprintf('%05d', $numericValue);
            } else {
                $processedSections[] = $section['value'];
            }
        }

        // Join the sections and return the sort_code
        return implode('', $processedSections);
    }
}
